<?php
/* Copyright (c) 2013, Geert Bergman (geert@scrivo.nl)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of "Scrivo" nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id$
 */

namespace Scrivo\Utilities;

/**
 * Class that implements the OAuth 1.0 protocol. Using OAuth you can send
 * authorized requests to web services. This class implements some of these
 * authorization rules.
 *
 * Also see the OAuth rfc:
 *   1.0: (http://tools.ietf.org/html/rfc5849).
 * 
 * Example (using bogus values):
 * 
 * $oAuth = new OAuth(
 *   "xvz1evFS4wEEPTGEFPHBog", //< consumer key
 *   "kAcSOqF21Fu85e7zjz7ZN2U4ZRhfV3WpwPAoE3Z7kBw", //< consumer secret
 *   "370773112-GmHxMAgYyLbNEtIKZeRNFsMKPR9EyMZeS9weJAEb", //< access token
 *   "LswwdoUaIvS8ltyTt5jkRh4J50vUPVVHtR2YPi5kE" //< access token secret
 * );
 * 
 * // Get the data to use in an authorized request.
 * $oAuthData = $oAuth->getAuthorizationData($requestMethod,
 *    "https://api.twitter.com/1.1/statuses/user_timeline.json?count=2");
 *
 * // This is the autorization header value to use in your request:
 * echo $oAuthData->authorisationHeader;
 *
 */
class OAuth {

	/**
	 * The OAuth version (currently we're only supporting 1.0);
	 * @var string
	 */
	private $version = "1.0";

	/**
	 * The OAuth signature method (currently we're only supporting HMAC-SHA1);
	 * @var string
	 */
	private $signatureMethod = "HMAC-SHA1";
	
	/**
	 * The identifier portion of the client credentials (equivalent to
	 * a username). The parameter name reflects a deprecated term
	 * (Consumer Key) used in previous revisions of the specification,
	 * and has been retained to maintain backward compatibility.
	 * @link http://tools.ietf.org/html/rfc5849#page-15 reference
	 * @var string
	 */
	private $consumerKey = null;

	/**
	 * The client shared-secret, after being encoded
	 * @var string
	 */
	private $consumerSecret = null;

	/**
	 * The token value used to associate the request with the resource
	 * owner. If the request is not associated with a resource owner
	 * (no token available), clients MAY omit the parameter.
	 * @link http://tools.ietf.org/html/rfc5849#page-15 reference
	 * @var string
	 */
	private $token = null;

	/**
	 * The token shared-secret, after being encoded
	 * @var string
	 */
	private $tokenSecret = null;
	
	/**
	 * Construct an OAuth object: an object that is able to do 
	 * authenticated requests.
	 * 
	 * @param string $consumerKey 
	 *   The identifier portion of the client credentials (equivalent to a 
	 *   username).
	 * @param string $consumerSecret 
	 *   The client shared-secret.
	 * @param string $token 
	 *   The token value used to associate the request with the resource owner.
	 * @param string $tokenSecret 
	 *   The token shared-secret.
	 */
	public function __construct(
			$consumerKey, $consumerSecret, $token=null, $tokenSecret=null) {
		$this->consumerKey = $consumerKey;
		$this->consumerSecret = $consumerSecret;
		$this->token = $token ? $token : "";
		$this->tokenSecret = $tokenSecret ? $tokenSecret : "";
	}
	
	/**
	 * Implementation of the property set methods.
	 */
	public function __set($name, $value) {
		if ($name === "token") {
			$this->token = $value;
		} else if ($name === "tokenSecret") {
			$this->tokenSecret = $value;
		} else {
			throw \Exception("No such set property '$name'");
		}
	}
	
	/**
	 * A nonce is a random string, uniquely generated by the client to allow
	 * the server to verify that a request has never been made before and
	 * helps prevent replay attacks when requests are made over a non-secure
	 * channel.  The nonce value MUST be unique across all requests with the
	 * same timestamp, client credentials, and token combinations.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.3 reference
	 * 
	 * @return string 
	 *   A unique token to send with the request.
	 */
	private function nonce() {
		// Not really unique using an md5 hash, but good enough hopefully.
		return hash("md5", mt_rand().time().mt_rand(), false);
	}
	
	/**
	 * Return a percent encoded string.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.6 reference
	 * 
	 * @param string 
	 *   $toEncode The data to percent encode.
	 * @return string
	 *   The percent encoded data.
	 */
	private function encode($toEncode) {
		return rawurlencode($toEncode);
	}

	/**
	 * Percent encode an array of key/value pairs. The method allow for 
	 * different glues to glue the encoded sets of key/value pairs together
	 * (apmerand and comma for example). It is also possible to supply a 
	 * quotation mark for the values in the result string.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.6 reference
	 * 
	 * @param string[] $toEncode 
	 *   An array with key/value pairs.
	 * @param string[] $glue 
	 *   The glue to bind the key/value pairs.
	 * @param string $qoute 
	 *   An optional quotation sign for the value.
	 * @return string 
	 *   A string containing the percent encoded key/value pairs seperated 
	 *   by an '=' sign and glued together using the $glue parameter.
	 */
	private function encodeKeyValuePairs(array $toEncode, $glue, $quote="") {
		$res = array();
		foreach ($toEncode as $k=>$v) {
			$res[] = $this->encode($k)."=".$quote.$this->encode($v).$quote;  
		}
		return implode($glue, $res);
	}

	/**
	 * Normalize the collected parameters into a single string.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2 reference
	 * 
	 * @param string[] $oauthParam 
	 *   An array of OAuth key/value pairs.
	 * @param string[] $param 
	 *   An array of request parameter key/value pairs.
	 * @return string 
	 *   A string of percent encoded key/value pairs each seperated by an '=' 
	 *   sign and each pair seperated by an ampersand.
	 */
	private function normalizeParam($oauthParam, $param) {
		$param += $oauthParam;
		ksort($param);
		return $this->encodeKeyValuePairs($param, "&");
	}

	/**
	 * The signature base string is a consistent, reproducible concatenation
	 * of several of the HTTP request elements into a single string. The
	 * string is used as an input to the "HMAC-SHA1" and "RSA-SHA1"
	 * signature methods.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.4.1 reference
	 * 
	 * @param string $requestMethod 
	 *   The HTTP request method to use in the request.
	 * @param string $baseUrl 
	 *   The base URL of the request (= the request URL including the protocol, 
	 *   host and path but excluding the parameters).
	 * @param string[] $oauthParam 
	 *   An array of OAuth key/value pairs.
	 * @param string[] $param 
	 *   An array of request parameter key/value pairs.
	 * @return string 
	 *   The OAuth signature base string.
	 */
	private function signatureBaseString(
			$requestMethod, $baseUrl, $oauthParam, $requestParam) {
		return implode("&", array(strtoupper($requestMethod), 
			$this->encode($baseUrl), $this->encode(
				$this->normalizeParam($oauthParam, $requestParam))));
	}
	
	/**
	 * Create the OAuth signature for a request.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.4.2 reference
	 * 
	 * @param string $requestMethod 
	 *   The HTTP request method to use in this request.
	 * @param string $baseUrl 
	 *   The base URL of the request (= the request URL including 
	 *   the protocol, host and path but excluding the parameters).
	 * @param string[] $oauthParam 
	 *   An array of OAuth key/value pairs.
	 * @param string[] $requestParam 
	 *   An array of request parameter key/value pairs.
	 * @return string 
	 *   The OAuth signature. 
	 */
	private function sign(
			$requestMethod, $baseUrl, $oauthParam, $requestParam) {
		return base64_encode(hash_hmac("sha1",
			$this->signatureBaseString(
				$requestMethod, $baseUrl, $oauthParam, $requestParam),
			$this->consumerSecret."&".$this->tokenSecret, true));
	}
	
	/**
	 * Get the authorization request header value for an OAuth signed reqeuest.
	 * @link http://tools.ietf.org/html/rfc5849#section-3.1 reference 
	 * 
	 * @param StdClass $d
	 *   An object containing a requestMethod, baseUrl and parameters
	 *   field.
	 * @param array $oathParam 
	 *   A array with additional oath parameters.
	 * @return string  
	 *   An oath authorization request header value.
	 */
	private function authorisationHeader($d, $oathParam) {
		$o = $oathParam + array(
			"oauth_consumer_key" => $this->consumerKey,
			"oauth_version" => $this->version,
			"oauth_timestamp" => time(),
			"oauth_nonce" => $this->nonce(),
			"oauth_signature_method" => $this->signatureMethod);
		$o["oauth_signature"] = 
			$this->sign($d->requestMethod, $d->baseUrl, $o, $d->parameters);
		return "OAuth " . $this->encodeKeyValuePairs($o, ", ", "\"");
	}

	/**
	 * Prepare the request data before signing.
	 *
	 * @param string $requestMethod
	 *   The HTTP request method to use in the request.
	 * @param string $url
	 *   The request URL. 
	 * @param array $param
	 *   An array of (additional) request parameter key/value pairs.
	 * @return StdClass
	 *   An object containing a requestMethod, baseUrl and parameters
	 *   field.
	 */
	private function prepareData($requestMethod, $url, $param) {
	
		$requestMethod = strtoupper($requestMethod);
		$ud = parse_url($url);
		$baseUrl = $ud["scheme"]."://".$ud["host"].$ud["path"];
		if (isset($ud["query"])) {
			parse_str($ud["query"], $param2);
			$param += $param2;
		}
	
		return (object)array("requestMethod" => $requestMethod,
			"baseUrl" => $baseUrl, "parameters" => $param);
	
	}
	
	/**
	 * Get the data for an OAuth 1.0 authorized request.
	 * 
	 * @param string $requestMethod 
	 *   The HTTP request method to use in this request (GET or POST).
	 * @param string $url 
	 *   The URL for the request. Request parameters can be included in the URL.
	 *   Note: this is an unescaped URL: ampersands should be "&" (not "&amp;") 
	 *   and spaces should be " " (not "%20" or "+"), and this is not limited
	 *   to ampersands and spaces.
	 * @param string[] $param 
	 *   Optional extra request parameters given as a set of name/value pairs. 
	 *   These parameters will get preceedence when name conflicts occur with 
	 *   parameters given in the $url parameter itself.
	 * @return \stdClass Object containing the following fields: 
	 *   authorisationHeader (string): The OAuth authorization header value. 
	 *   parameters (array): The request parameters.
	 *   baseUrl (string): The request URL without the parameters.
	 */
	public function getAuthorizationData(
			$requestMethod, $url, array $param=array()) {
		$d = $this->prepareData($requestMethod, $url, $param);
		$d->authorisationHeader = $this->authorisationHeader($d,
			array("oauth_token" => $this->token));
		return $d;
	}
	
	/**
	 * Get the data for an OAuth 1.0 temporary credential request.
	 * 
	 * @param string $requestMethod 
	 *   The HTTP request method to use in this request (GET or POST).
	 * @param string $url 
	 *   The URL for the request. Request parameters can be included in the URL.
	 *   Note: this is an unescaped URL: ampersands should be "&" (not "&amp;") 
	 *   and spaces should be " " (not "%20" or "+"), and this is not limited
	 *   to ampersands and spaces.
	 * @param string $callbackUrl
	 *   The callback URL to use, use "oob" if an out of bound configuration
	 *   is used.
	 * @param string[] $param 
	 *   Optional extra request parameters given as a set of name/value pairs. 
	 *   These parameters will get preceedence when name conflicts occur with 
	 *   parameters given in the $url parameter itself.
	 * @return \stdClass Object containing the following fields: 
	 *   authorisationHeader (string): The OAuth authorization header value. 
	 *   parameters (array): The request parameters.
	 *   baseUrl (string): The request URL without the parameters.
	 */
	public function getTemporaryCredentialRequestData(
			$requestMethod, $url, $callbackUrl, $param) {
		$d = $this->prepareData($requestMethod, $url, $param);
		$d->authorisationHeader = $this->authorisationHeader($d, 
			array("oauth_callback" => $callbackUrl));
		return $d;
	}

	/**
	 * Get the data for an OAuth 1.0 token credentials request.
	 * 
	 * @param string $requestMethod 
	 *   The HTTP request method to use in this request (GET or POST).
	 * @param string $url 
	 *   The URL for the request. Request parameters can be included in the URL.
	 *   Note: this is an unescaped URL: ampersands should be "&" (not "&amp;") 
	 *   and spaces should be " " (not "%20" or "+"), and this is not limited
	 *   to ampersands and spaces.
	 * @param string $verifier
	 *   A verification code received from the OAuth server.
	 * @param string[] $param 
	 *   Optional extra request parameters given as a set of name/value pairs. 
	 *   These parameters will get preceedence when name conflicts occur with 
	 *   parameters given in the $url parameter itself.
	 * @return \stdClass Object containing the following fields: 
	 *   authorisationHeader (string): The OAuth authorization header value. 
	 *   parameters (array): The request parameters.
	 *   baseUrl (string): The request URL without the parameters.
	 */
	public function getAccessTokenRequestData(
			$requestMethod, $url, $verifier, $param) {
		$d = $this->prepareData($requestMethod, $url, $param);
		$d->authorisationHeader = $this->authorisationHeader($d, array(
			"oauth_verifier" => $verifier, "oauth_token" => $this->token));
		return $d;
	}
	
}

?>